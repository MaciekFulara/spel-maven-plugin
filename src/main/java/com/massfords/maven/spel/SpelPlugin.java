package com.massfords.maven.spel;

/*
 * Copyright 2001-2005 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.reflections.Reflections;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;

import javax.annotation.Generated;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * Goal for scanning class files looking for annotations with Spring Expression
 * Language expressions and parsing during the build to report any errors.
 */
@Mojo(name = "spel", defaultPhase = LifecyclePhase.PROCESS_CLASSES)
public class SpelPlugin extends AbstractMojo {

    @Component
    private MavenProject project;

    @Parameter(property = "annotations", required = false)
    // todo - have this default to common ones like PreAuthorize (and others?)
    private List<SpelAnnotation> annotations;

    public void execute() throws MojoExecutionException {

        ExpressionParser parser = new SpelExpressionParser();

        try {
            List<String> classpathElements = project.getCompileClasspathElements();
            List<URL> projectClasspathList = new ArrayList<URL>();
            for (String element : classpathElements) {
                try {
                    projectClasspathList.add(new File(element).toURI().toURL());
                } catch (MalformedURLException e) {
                    throw new MojoExecutionException(element + " is an invalid classpath element", e);
                }
            }

            URL[] urls = new URL[projectClasspathList.size()];
            // ... and now you can pass the above classloader to Reflections
            Reflections reflections = new Reflections(urls);
            for(SpelAnnotation sa : annotations) {
                // todo - catch and throw meaningful error here if they provided the wrong fully qualified name
                //noinspection unchecked
                final Class<? extends Annotation> annoType = (Class<? extends Annotation>) Class.forName(sa.getName());
                Set<Method> set = reflections.getMethodsAnnotatedWith(annoType);
                for(Method m : set) {
                    Annotation anno = m.getAnnotation(annoType);

                    Method attrGetter = annoType.getDeclaredMethod(sa.getAttribute());
                    // todo - report an error if it's not a string
                    String expression = (String) attrGetter.invoke(anno);
                    parser.parseExpression(expression);
                    // todo - report an error if there's a problem parsing
                }
            }
        } catch (Exception e) {
            // todo - the code above should be more resilient. We should keep going and report errors up to a max of 100 errors.
            // Thus, if we get here, it's something fatal that we can't recover from.
            throw new MojoExecutionException("Have a meaningful exception here", e);
        }
    }

    @Generated("generated by IDE")
    public MavenProject getProject() {
        return project;
    }

    @Generated("generated by IDE")
    public void setProject(MavenProject project) {
        this.project = project;
    }

    @Generated("generated by IDE")
    public List<SpelAnnotation> getAnnotations() {
        return annotations;
    }

    @Generated("generated by IDE")
    public void setAnnotations(List<SpelAnnotation> annotations) {
        this.annotations = annotations;
    }
}
